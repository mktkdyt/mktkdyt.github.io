<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ASP.NET on mktkdyt</title>
    <link>https://mktkdyt.github.io/post/asp_dot_net/</link>
    <description>Recent content in ASP.NET on mktkdyt</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Thu, 14 Jan 2021 17:24:23 +0900</lastBuildDate><atom:link href="https://mktkdyt.github.io/post/asp_dot_net/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Ajax の CSRF 対策</title>
      <link>https://mktkdyt.github.io/post/asp_dot_net/ajax%E3%81%AEcsrf%E5%AF%BE%E7%AD%96/</link>
      <pubDate>Thu, 14 Jan 2021 17:24:23 +0900</pubDate>
      
      <guid>https://mktkdyt.github.io/post/asp_dot_net/ajax%E3%81%AEcsrf%E5%AF%BE%E7%AD%96/</guid>
      <description>Ajax の CSRF 対策 SPAで非同期通信を多用すると思います。その際に、非同期通信の場合のCSRF対策について調査ました。
通常の同期処理（ページ遷移）の場合 ASP.NET MVCではCSRF対策が超簡単です。
ViewのFormの中でRazorの@Html.AntiForgeryToken()を呼ぶだけでトークンを埋め込むことが出来ます。
トークンを検証するにはControllerでActionMethodの属性にValidationAntiForgeryTokneを指定するだけです。
View
@using (Html.BeginForm()){ @Html.AntiForgeryToken() // 略 } Controller
[ValidationAntiForgeryToken] [HttpPost] public ActionResult Create(ViewModel model){ // 略 } ところが、非同期処理（Ajax）の場合は少々工夫が必要になります。
非同期処理（Ajax）の場合 Razorでクッキーのトークンとフォームのトークンを発行する関数を作成します。
作成した関数を呼び、hidden値に設定し、POST時にヘッダに付加してリクエストを送信します。
View
&amp;lt;script&amp;gt; @functions{ public string GenerateRequestVerificationToken() { string cookieToken, formToken; AntiForgery.GetTokens(null, out cookieToken, out formToken); return cookieToken + &amp;#34;:&amp;#34; + formToken; } } &amp;lt;/script&amp;gt; &amp;lt;input type=&amp;#34;hidden&amp;#34; id=&amp;#34;requestValificationToken&amp;#34; value=&amp;#34;@GenerateRequestValificationToken()&amp;#34; /&amp;gt; JS
$.ajax({ url: http://test/Create,  type: &amp;#34;POST&amp;#34;, dataType: &amp;#34;json&amp;#34;, data: { data: hoge }, headers: { &amp;#39;RequestVerificationToken&amp;#39;: $(&amp;#39;#requestVerificationToken&amp;#39;).</description>
    </item>
    
    <item>
      <title>ASP.NET のモジュールを Jenkins で発行する</title>
      <link>https://mktkdyt.github.io/post/asp_dot_net/asp.net%E3%81%AE%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%82%92jenkins%E3%81%A7%E7%99%BA%E8%A1%8C%E3%81%99%E3%82%8B/</link>
      <pubDate>Thu, 14 Jan 2021 17:24:23 +0900</pubDate>
      
      <guid>https://mktkdyt.github.io/post/asp_dot_net/asp.net%E3%81%AE%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%82%92jenkins%E3%81%A7%E7%99%BA%E8%A1%8C%E3%81%99%E3%82%8B/</guid>
      <description>ASP.NET のモジュールを Jenkins で発行する デプロイモジュールを発行するために
msbuild target.sln /p:VisualStudioVersion=14.0 /p:DeployOnBuild=true /p:Configuration=targetStaging /p:PublishProfile=targetProfile をjenkinsのジョブに登録し、実行すると以下のエラーが発生。
C:\ProgramFiles (x86)\MSBuild\Microsoft\VisualStudio\v14.0\Web\Transform\Microsoft.Web.Publishing.AspNetCompileMerge.targets(132,5): error :  Can&amp;#39;t find the valid AspnetMergePath [C:\Jenkins\workspace\Common_Build\Apps\Pajdis.CommonAndPortal\Pajdis.CommonAndPortal\Pajdis.CommonAndPortal.csproj] なにこれ。VisualStudioで発行するときに見たこと無いぞ。 とりあえずコマンドにAspnetMergePathを明示すれば動くだろ。
msbuild target.sln /p:VisualStudioVersion=14.0 /p:DeployOnBuild=true /p:Configuration=targetStaging /p:PublishProfile=targetProfile /p:AspnetMergePath=&amp;#34;C:\Program Files (x86)\Microsoft SDKs\Windows\v8.1A\bin\NETFX 4.5.1 Tools\&amp;#34; よっしゃ実行だ！
MSBUILD : error MSB1008: 1 つのプロジェクトのみを指定できます。 なん。。だと。。。。動かない。。。
よくよく見ると
Path To MSBuild.exe: msbuild.exe Executing the command cmd.exe /C &amp;#34; msbuild.exe /p:VisualStudioVersion=14.0 /p:DeployOnBuild=true /p:Configuration=DebugPajdis /p:PublishProfile=DebugPajdis &amp;#34;\p:AspnetMergePath=C:\Program Files (x86)\Microsoft SDKs\Windows\v8.1A\bin\NETFX 4.5.1 Tools&amp;#34;&amp;#34; Apps\Pajdis.CommonAndPortal\Pajdis.CommonAndPortal.sln &amp;#34; &amp;amp;&amp;amp; exit %%ERRORLEVEL%%from C:\Jenkins\workspace\Common_Build [Common_Build] $ cmd.</description>
    </item>
    
    <item>
      <title>Bundle と Minify</title>
      <link>https://mktkdyt.github.io/post/asp_dot_net/bundle%E3%81%A8minify/</link>
      <pubDate>Thu, 14 Jan 2021 17:24:23 +0900</pubDate>
      
      <guid>https://mktkdyt.github.io/post/asp_dot_net/bundle%E3%81%A8minify/</guid>
      <description>Bundle と Minify ASP.NET MVCではwebpack使わなくてもスクリプトをバンドルできます． 各画面にソースのパスを書くのは面倒なのでBundleConfigでまとめてみます．
Microsoft.AspNet.Web.Optimizationの取得 Microsoft.AspNet.Web.OptimizationをNuGetから取得します．
BundleConfigの作成 App_StartフォルダにBundleConfig.csを追加します．
using System.Web.Optimization; public class BundleConfig { public static void RegisterBundles(BundleCollection bundles) { bundles.Add(new ScriptBundle(&amp;#34;~/bundles/jquery&amp;#34;).Include( &amp;#34;~/Scripts/jquery-{version}.js&amp;#34;)); bundles.Add(new ScriptBundle(&amp;#34;~/scripts/hoge&amp;#34;).Include( &amp;#34;~/Scripts/Sample/hoge.js&amp;#34;, &amp;#34;~/Scripts/Sample/fuga.js&amp;#34;, &amp;#34;~/Scripts/Sample/piyo.js&amp;#34;)); } } BundleConfigをGlobal.asaxへ登録する Global.asax.csでBundleConfigを呼び出すようにします．
using System.Web.Optimization; public class Global : HttpApplication { void Application_Start(object sender, EventArgs e) { BundleConfig.RegisterBundles(BundleTable.Bundles); } } 画面からBundleを呼び出す あとは画面で呼び出すだけです．
@using System.Web.Optimization &amp;lt;head&amp;gt; @Scripts.Render(&amp;#34;~/bundles/jquery&amp;#34;) @Scripts.Render(&amp;#34;~/bundles/hoge&amp;#34;) &amp;lt;/head&amp;gt; 結果
&amp;lt;head&amp;gt; &amp;lt;script src=&amp;#34;/map/scripts/jquery?v=WvOgJns1M1ZZkySVvxnR5qZTgNQ_UWnAsm21lcWbuMs1&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;#34;/map/scripts/hoge?v=fsiac-cyztW0v5rUgi-a9vvPTsOHXerrhW6x3w1IiHw1&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; ソースのパスをBundleConfigにまとめることが出来ました． また、BundleConfigで{version}と指定することでライブラリのバージョンを更新しても気にする必要がなくなりました． 更に、結果のソースを見てみるとminifyされていることが分かります．
var hoge=function(){function n(){}return n.</description>
    </item>
    
    <item>
      <title>IE 互換表示モード対応</title>
      <link>https://mktkdyt.github.io/post/asp_dot_net/ie%E4%BA%92%E6%8F%9B%E8%A1%A8%E7%A4%BA%E3%83%A2%E3%83%BC%E3%83%89%E5%AF%BE%E5%BF%9C/</link>
      <pubDate>Thu, 14 Jan 2021 17:24:23 +0900</pubDate>
      
      <guid>https://mktkdyt.github.io/post/asp_dot_net/ie%E4%BA%92%E6%8F%9B%E8%A1%A8%E7%A4%BA%E3%83%A2%E3%83%BC%E3%83%89%E5%AF%BE%E5%BF%9C/</guid>
      <description>IE 互換表示モード対応 各Viewにmetaタグ書くのもあれなので一括でタグ入れられる方法を調べました。
Web.configによる対応 Web.configでカスタムHTTPヘッダを追加します。
&amp;lt;configuration&amp;gt;&amp;lt;system.webServer&amp;gt;&amp;lt;httpProtocol&amp;gt;&amp;lt;customHeaders&amp;gt;&amp;lt;add name=&amp;quot;X-UA-Compatible&amp;quot; value=&amp;quot;IE=edge&amp;quot; /&amp;gt;&amp;lt;/customHeaders&amp;gt;&amp;lt;/httpProtocol&amp;gt;&amp;lt;/system.webServer&amp;gt;&amp;lt;/configuration&amp;gt;Global.asaxによる対応 レスポンスヘッダに値を追加します。
protected void Application_PreSendRequestHeaders() { Response.Headers.Add(&amp;#34;X-UA-Compatible&amp;#34;, &amp;#34;IE=edge&amp;#34;); } ちなみにレスポンスヘッダから値を削除する場合は下記の通りです。
protected void Application_PreSendRequestHeaders() { Response.Headers.Remove(&amp;#34;key&amp;#34;); } </description>
    </item>
    
    <item>
      <title>スタイルシートをバンドルする際に画像パスに注意</title>
      <link>https://mktkdyt.github.io/post/asp_dot_net/%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB%E3%82%B7%E3%83%BC%E3%83%88%E3%82%92%E3%83%90%E3%83%B3%E3%83%89%E3%83%AB%E3%81%99%E3%82%8B%E9%9A%9B%E3%81%AB%E7%94%BB%E5%83%8F%E3%83%91%E3%82%B9%E3%81%AB%E6%B3%A8%E6%84%8F/</link>
      <pubDate>Thu, 14 Jan 2021 17:24:23 +0900</pubDate>
      
      <guid>https://mktkdyt.github.io/post/asp_dot_net/%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB%E3%82%B7%E3%83%BC%E3%83%88%E3%82%92%E3%83%90%E3%83%B3%E3%83%89%E3%83%AB%E3%81%99%E3%82%8B%E9%9A%9B%E3%81%AB%E7%94%BB%E5%83%8F%E3%83%91%E3%82%B9%E3%81%AB%E6%B3%A8%E6%84%8F/</guid>
      <description>スタイルシートをバンドルする際に画像パスに注意 またASP.NETのバンドルの話です。
スタイルシートを何も考えずにまとめてバンドルする とりあえずスタイルシートをまとめてみます。
bundles.Add(new StyleBundle(&amp;#34;~/bundles/style&amp;#34;).Include( &amp;#34;~/lib/bootstrap/css/bootstrap.min.css&amp;#34;, &amp;#34;~/lib/jquery-ui/jquery-ui.css&amp;#34;, &amp;#34;~/lib/font-awesome/css/font-awesome.css&amp;#34; )); こうすると3つのスタイルシートは一つにバンドルされます。
画面でこのスタイルを読み込んでみます。
@using System.Web.Optimization &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width&amp;#34; /&amp;gt; &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt; @Scripts.Render(&amp;#34;~/bundles/scripts&amp;#34;) @Styles.Render(&amp;#34;~/bundles/styles&amp;#34;) &amp;lt;script&amp;gt; $(function () { $(&amp;#34;#hoge&amp;#34;).dialog(); }) &amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div id=&amp;#34;hoge&amp;#34;&amp;gt;閉じるボタンのアイコン見えてる？&amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 画面を表示してみます。
ダイアログのアイコンが表示されていませんね。
コンソールを見てみるとjquery-uiのアイコンが見つからないと怒られています。
これはスタイルシートが仮想パスにバンドルされ、バンドル先にimagesが無いのが原因です。
そこで、実際にスタイルシートが置いてある場所にバンドルするようにします。
実在パスにあわせてスタイルシートをバンドルする 実際のパスはこんな感じです。 jquery-ui.cssが置かれているフォルダにimagesがあります。
では、ソースをこのように修正しましょう。
パスに&amp;lt;実在パス&amp;gt;/cssのように指定します。
bundles.Add(new StyleBundle(&amp;#34;~/lib/jqueryui/css&amp;#34;).Include(&amp;#34;~/lib/jqueryui/jquery-ui.css&amp;#34;)); bundles.Add(new StyleBundle(&amp;#34;~/lib/bootstrap/css/css&amp;#34;).Include(&amp;#34;~/lib/bootstrap/css/bootstrap.css&amp;#34;)); bundles.Add(new StyleBundle(&amp;#34;~/lib/font-awesome/css/css&amp;#34;).Include(&amp;#34;~/lib/font-awesome/css/font-awesome.css&amp;#34;)); 後はそれを画面から読み込みます。
@using System.Web.Optimization &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width&amp;#34; /&amp;gt; &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt; @Scripts.Render(&amp;#34;~/bundles/scripts&amp;#34;) @Styles.Render(&amp;#34;~/lib/jqueryui/css&amp;#34;) @Styles.Render(&amp;#34;~/lib/bootstrap/css/css&amp;#34;) @Styles.Render(&amp;#34;~/lib/font-awesome/css/css&amp;#34;) &amp;lt;script&amp;gt; $(function () { $(&amp;#34;#hoge&amp;#34;).</description>
    </item>
    
    <item>
      <title>ビルド構成の追加</title>
      <link>https://mktkdyt.github.io/post/asp_dot_net/%E3%83%93%E3%83%AB%E3%83%89%E6%A7%8B%E6%88%90%E3%81%AE%E8%BF%BD%E5%8A%A0/</link>
      <pubDate>Thu, 14 Jan 2021 17:24:23 +0900</pubDate>
      
      <guid>https://mktkdyt.github.io/post/asp_dot_net/%E3%83%93%E3%83%AB%E3%83%89%E6%A7%8B%E6%88%90%E3%81%AE%E8%BF%BD%E5%8A%A0/</guid>
      <description>ビルド構成の追加 社内試験環境と本番環境用にビルド構成を作成するために調べた。@Visual Studio 2017
  ビルド-&amp;gt;構成マネージャで構成マネージャダイアログを開く。
  アクティブソリューション構成のプルダウンリストを開き、新規作成を選択する。
  任意の名前を入力しOKを押下する。
  以上の手順を踏むとリストに作成したビルド構成が追加される。</description>
    </item>
    
    <item>
      <title>ビルド構成毎の Config 変換</title>
      <link>https://mktkdyt.github.io/post/asp_dot_net/%E3%83%93%E3%83%AB%E3%83%89%E6%A7%8B%E6%88%90%E6%AF%8E%E3%81%AEconfig%E3%81%AE%E5%A4%89%E6%8F%9B/</link>
      <pubDate>Thu, 14 Jan 2021 17:24:23 +0900</pubDate>
      
      <guid>https://mktkdyt.github.io/post/asp_dot_net/%E3%83%93%E3%83%AB%E3%83%89%E6%A7%8B%E6%88%90%E6%AF%8E%E3%81%AEconfig%E3%81%AE%E5%A4%89%E6%8F%9B/</guid>
      <description>ビルド構成毎の Config 変換 社内試験環境と本番環境用にWeb.configを書き換えるために調べた。@Visual Studio 2017
ビルド構成毎の Config の作成  Web.configを右クリックし、Config変換を追加を選択する。  ビルド構成毎にWeb.configが作成される。
ビルド構成毎に Config を書き換える ビルド構成毎にWebServiceの参照先を変更したい場合があると思います。
ローカルでは http://hoge.co.jp 、配備先では http://fuga.co.jp としたい場合、configを下記のように設定します。
Web.config
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;appSettings&amp;gt; &amp;lt;add key=&amp;#34;WebServiceUrl&amp;#34; value=&amp;#34;http://hoge.co.jp&amp;#34;/&amp;gt; &amp;lt;/appSettings&amp;gt; &amp;lt;/configuration&amp;gt; Web.Dev.Config
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt; &amp;lt;configuration xmlns:xdt=&amp;#34;http://schemas.microsoft.com/XML-Document-Transform&amp;#34;&amp;gt; &amp;lt;appSettings xdt:Transform=&amp;#34;Replace&amp;#34;&amp;gt; &amp;lt;add key=&amp;#34;WebServiceUrl&amp;#34; value=&amp;#34;http://fuga.co.jp&amp;#34;/&amp;gt; &amp;lt;/appSettings&amp;gt; &amp;lt;/configuration&amp;gt; 実際に構成をDevに設定し、ビルドするとWeb.configが書き換えられます。
Web.config
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;appSettings&amp;gt; &amp;lt;add key=&amp;#34;WebServiceUrl&amp;#34; value=&amp;#34;http://fuga.co.jp&amp;#34;/&amp;gt; &amp;lt;/appSettings&amp;gt; &amp;lt;/configuration&amp;gt; </description>
    </item>
    
    <item>
      <title>指定した順序でバンドルする</title>
      <link>https://mktkdyt.github.io/post/asp_dot_net/%E6%8C%87%E5%AE%9A%E3%81%97%E3%81%9F%E9%A0%86%E5%BA%8F%E3%81%A7bundle%E3%81%99%E3%82%8B/</link>
      <pubDate>Thu, 14 Jan 2021 17:24:23 +0900</pubDate>
      
      <guid>https://mktkdyt.github.io/post/asp_dot_net/%E6%8C%87%E5%AE%9A%E3%81%97%E3%81%9F%E9%A0%86%E5%BA%8F%E3%81%A7bundle%E3%81%99%E3%82%8B/</guid>
      <description>指定した順序でバンドルする ASP.NETでスクリプトをバンドル出来ますが、かゆいところに手が届かない部分があるのでまとめておきます。
通常のバンドル ASP.NETでスクリプトをバンドルするとき下記のように書きます。
public class BundleConfig { public static void RegisterBundles(BundleCollection bundles) { bundles.Add(new ScriptBundle(&amp;#34;~/bundles/scripts&amp;#34;).Include( &amp;#34;~/Scripts/jquery.js&amp;#34;, &amp;#34;~/Scripts/jquery-ui.js&amp;#34; &amp;#34;~/Scripts/bootstrap.js&amp;#34;)); } } ただし、スクリプトが読み込まれる順番はランダムなので、jquery読み込んだ後にjquery-ui読み込むといったことがデフォルトでは出来ません。
デフォルトでパス追加した順序で読み込んでくれればいいのに！
指定した順序でバンドル まず、下記のクラスを用意します。
public class AsIsBundleOrderer : IBundleOrderer { public IEnumerable&amp;lt;BundleFile&amp;gt; OrderFiles(BundleContext context, IEnumerable&amp;lt;BundleFile&amp;gt; files) { return files; } } 続けて、バンドルに読み込みたい順序でスクリプトのパスを追加し、バンドルの順序を指定します。
public class BundleConfig { public static void RegisterBundles(BundleCollection bundles) { var bundle = new ScriptBundle(&amp;#34;~/bundles/scripts&amp;#34;) .Include(&amp;#34;~/Scripts/jquery.js&amp;#34;) .Include(&amp;#34;~/Scripts/jquery-ui.js&amp;#34;) .Include(&amp;#34;~/Scripts/bootstrap.js&amp;#34;); // バンドルの順序をバンドルにファイルを追加した順序にします  bundle.Orderer = new AsIsBundleOrderer(); bundles.Add(bundle); } } 後は画面で読み込めば、指定した順序でスクリプトが読み込まれます。</description>
    </item>
    
    <item>
      <title>検証属性のエラーメッセージを一元管理する</title>
      <link>https://mktkdyt.github.io/post/asp_dot_net/%E6%A4%9C%E8%A8%BC%E5%B1%9E%E6%80%A7%E3%81%AE%E3%82%A8%E3%83%A9%E3%83%BC%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E3%82%92%E4%B8%80%E5%85%83%E7%AE%A1%E7%90%86%E3%81%99%E3%82%8B/</link>
      <pubDate>Thu, 14 Jan 2021 17:24:23 +0900</pubDate>
      
      <guid>https://mktkdyt.github.io/post/asp_dot_net/%E6%A4%9C%E8%A8%BC%E5%B1%9E%E6%80%A7%E3%81%AE%E3%82%A8%E3%83%A9%E3%83%BC%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E3%82%92%E4%B8%80%E5%85%83%E7%AE%A1%E7%90%86%E3%81%99%E3%82%8B/</guid>
      <description>検証属性のエラーメッセージを一元管理する 元々ある検証属性のエラーメッセージを一元管理する場合 検証属性に対応するAttributeAdapterを継承し、エラーメッセージのリソースを指定します。
using Resources; using System.ComponentModel.DataAnnotations; using System.Web.Mvc; namespace Sample.CustomAttributeAdapter { public class CustomStringLengthAttributeAdapter : StringLengthAttributeAdapter { public CustomStringLengthAttributeAdapter(ModelMetadata metadata, ControllerContext context, StringLengthAttribute attribute) : base(metadata, context, attribute) { // 作成したリソースファイルを指定  attribute.ErrorMessageResourceType = typeof(Messages); // リソースファイルに記述した名前を指定  attribute.ErrorMessageResourceName = &amp;#34;PropertyValueStringLength&amp;#34;; } } } Global.asaxのapplication_Startでリソースファイルを指定し、作成したアダプターを登録します。
using System.ComponentModel.DataAnnotations; using System.Web; using System.Web.Mvc; namespace Sample { public class MvcApplication : System.Web.HttpApplication { protected void Application_Start() { // 作成したリソース名を設定  DefaultModelBinder.ResourceClassKey = &amp;#34;Messages&amp;#34;; // アダプターの設定  DataAnnotationsModelValidatorProvider.</description>
    </item>
    
    <item>
      <title>検証属性を自作する</title>
      <link>https://mktkdyt.github.io/post/asp_dot_net/%E6%A4%9C%E8%A8%BC%E5%B1%9E%E6%80%A7%E3%82%92%E8%87%AA%E4%BD%9C%E3%81%99%E3%82%8B/</link>
      <pubDate>Thu, 14 Jan 2021 17:24:23 +0900</pubDate>
      
      <guid>https://mktkdyt.github.io/post/asp_dot_net/%E6%A4%9C%E8%A8%BC%E5%B1%9E%E6%80%A7%E3%82%92%E8%87%AA%E4%BD%9C%E3%81%99%E3%82%8B/</guid>
      <description>検証属性を自作する ASP.NET MVCが提供している検証属性だけじゃ足りない！！！ そういう場合は自作する必要があります。
つくりかた ValidationAttributeクラスを継承したクラスを作成し、IsValidメソッドをオーバーライドします。 クラス名は「HogeAttribute」のように末尾にAttributeを付与してください。
using System; using System.ComponentModel.DataAnnotations; using System.Text.RegularExpressions; namespace Sample.CustomValidationAttribute { /// &amp;lt;summary&amp;gt;  /// 入力値が「yyyy/MM/dd」形式であるかを検証します。  /// &amp;lt;/summary&amp;gt;  public class DateAttribute : ValidationAttribute { public override bool IsValid(object value) { if (value != null) { return Regex.IsMatch(value.ToString(), @&amp;#34;^(\d{4})/(0[1-9]|1[0-2])/(0[1-9]|[12][0-9]|3[01])$&amp;#34;); } return false; } } } つかいかた 自作した検証は元々ある検証と同じように使用することが出来ます。
using System.ComponentModel; using System.ComponentModel.DataAnnotations; using Sample.CustomValidationAttribute; namespace Sample.Dto { public class PersonViewModel { [DisplayName(&amp;#34;生年月日&amp;#34;)] [Required] // これはもともとあるやつ [Date] // これ自作したやつ  public string BirthDay { get; set; } } } </description>
    </item>
    
    <item>
      <title>面倒なオブジェクトマッピングは AutoMapper にやらせよう</title>
      <link>https://mktkdyt.github.io/post/asp_dot_net/%E9%9D%A2%E5%80%92%E3%81%AA%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%83%9E%E3%83%83%E3%83%94%E3%83%B3%E3%82%B0%E3%81%AFautomapper%E3%81%AB%E3%82%84%E3%82%89%E3%81%9B%E3%82%88%E3%81%86/</link>
      <pubDate>Thu, 14 Jan 2021 17:24:23 +0900</pubDate>
      
      <guid>https://mktkdyt.github.io/post/asp_dot_net/%E9%9D%A2%E5%80%92%E3%81%AA%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%83%9E%E3%83%83%E3%83%94%E3%83%B3%E3%82%B0%E3%81%AFautomapper%E3%81%AB%E3%82%84%E3%82%89%E3%81%9B%E3%82%88%E3%81%86/</guid>
      <description>面倒なオブジェクトマッピングは AutoMapper にやらせよう AutoMapperって？ オブジェクトの詰め替えをしてくれる.NETのライブラリです． マッパーを使うことでオブジェクトの詰め替えをその都度記述する必要がなくなるのでコーディング量を減らすことが出来ます． また、オブジェクト間のプロパティの対応関係を局所化することが出来るので、修正箇所が限定されます．
AutoMapperの取得 NuGetからAutoMapperを取得してください．
AutoMapperを使わない場合 MVCではよくEntityをViewModelに詰め替えることがあるかと思います． 例えばDBから取得したユーザをViewModelに詰め替えて返す場合こんな感じになるかと思います．
public class UserController { public ActionResult Detail(string name) { // DBからUSERを取得したとする  var user = Service.FindUserByName(name); // USER -&amp;gt; UserViewModel  var viewModel = new UserViewModel() { UserId = user.USER_ID; UserName = user.USER_NAME; Tel = user.TEL; Mail = user.MAIL; } return View(viewModel); } } Entity
public class USER { public string USER_ID { get; set; } public string USER_NAME { get; set; } public string TEL { get; set; } public string MAIL { get; set; } } ViewModel</description>
    </item>
    
  </channel>
</rss>
